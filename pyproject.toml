[global]
build-dir = "build"

[tool.cmake]
experimental = true

[build-system]
requires = ["scikit-build-core"]
build-backend = "scikit_build_core.build"

[tool.scikit-build]
wheel.packages = []
cmake.build-type = "Release"
#wheel.install-dir = "siren"

[tool.scikit-build.cmake.define]
CMAKE_PREFIX_PATH="/tmp/downloads/local"

[tool.cibuildwheel]
before-all = "bash {project}/tools/wheels/cibw_before_all.sh {project}"
skip = "pp*"

[tool.cibuildwheel.windows]
environment = { RUNNER_OS="Windows", CI_INSTALL_PREFIX="C:/Users/AppData/Local/Temp/downloads/local", CFITSIOROOT="$CI_INSTALL_PREFIX", LD_LIBRARY_PATH="$CI_INSTALL_PREFIX/lib;$CI_INSTALL_PREFIX/lib64;$CI_INSTALL_PREFIX/bin;$LD_LIBRARY_PATH" }
repair-wheel-command = "delvewheel repair --add-path $LD_LIBRARY_PATH"

[tool.cibuildwheel.linux]
environment = { RUNNER_OS="Linux", MAKEFLAGS="-j2", CI_INSTALL_PREFIX="/tmp/downloads/local", CFITSIOROOT="$CI_INSTALL_PREFIX", LD_LIBRARY_PATH="$CI_INSTALL_PREFIX/lib:$CI_INSTALL_PREFIX/lib64:$LD_LIBRARY_PATH" }
repair-wheel-command = "auditwheel repair --exclude photospline -w {dest_dir} {wheel}"

[tool.cibuildwheel.macos]
environment = { RUNNER_OS="macOS", MAKEFLAGS="-j2", CI_INSTALL_PREFIX="/tmp/downloads/local", CFITSIOROOT="$CI_INSTALL_PREFIX", REPO_PATH="/Users/runner/work/SIREN/SIREN", REPAIR_LIBRARY_PATH="$CI_INSTALL_PREFIX/lib:$CI_INSTALL_PREFIX/lib64", LD_LIBRARY_PATH="$REPAIR_LIBRARY_PATH:$LD_LIBRARY_PATH", DYLD_LIBRARY_PATH="$REPAIR_LIBRARY_PATH:$DYLD_LIBRARY_PATH" }
repair-wheel-command = """\
DYLD_LIBRARY_PATH=$REPAIR_LIBRARY_PATH:$DYLD_LIBRARY_PATH echo "Search path: $DYLD_LIBRARY_PATH" && \
DYLD_LIBRARY_PATH=$REPAIR_LIBRARY_PATH:$DYLD_LIBRARY_PATH delocate-listdeps {wheel} && \
DYLD_LIBRARY_PATH=$REPAIR_LIBRARY_PATH:$DYLD_LIBRARY_PATH which python && \
DYLD_LIBRARY_PATH=$REPAIR_LIBRARY_PATH:$DYLD_LIBRARY_PATH python --version && \
DYLD_LIBRARY_PATH=$REPAIR_LIBRARY_PATH:$DYLD_LIBRARY_PATH delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}"""

[project]
name = "siren"
version = "0.0.2"
description = "Sampling and Injection for Rare EveNts: A neutrino and rare-process injection toolkit"
readme = "README.md"
requires-python = ">=3.8"
license = {file = "LICENSE"}
keywords = ["physics", "hep", "netrino", "bsm", "simulation", "injection", "weighting"]
authors = [
    {name = "Austin Schneider", email = "aschn@mit.edu"},
    {name = "Nicholas Kamp", email = "nkamp@fas.harvard.edu"}
]
maintainers = [
    {name = "Austin Schneider", email = "aschn@mit.edu"},
    {name = "Nicholas Kamp", email = "nkamp@fas.harvard.edu"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
    "Programming Language :: C++",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Operating System :: MacOS",
    "Topic :: Scientific/Engineering :: Physics",
]
dependencies = [
    "numpy",
    "scipy",
    "awkward",
    "pyarrow",
    "h5py",
]
[project.optional-dependencies]
DarkNews = ["DarkNews>=0.4.2"]

[project.urls]
Homepage = "https://github.com/Harvard-Neutrino/SIREN"
Documentation = "https://readthedocs.org"
Repository = "https://github.com/Harvard-Neutrino/SIREN.git"
Issues = "https://github.com/Harvard-Neutrino/LeptonInjector/issues"

[wheel]
no-clean = true

[install]
no-clean = true
